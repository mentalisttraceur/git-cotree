#!/bin/sh -
# SPDX-License-Identifier: 0BSD
# Copyright 2021 Alexander Kozhevnikov <mentalisttraceur@gmail.com>

initialize()
{
    unused=`git log -n1` || exit 1
    branch=`git branch --show-current` || exit 1
    case $branch in '') error_not_on_branch; exit 1; esac
    root=`git rev-parse --show-toplevel` || exit 1
    cd "$root" || exit 1
    case `git rev-parse --git-common-dir` in .git) :;; *)
        error_missing_git_directory; exit 1
    esac
    git diff --staged --quiet
    case $? in 1)
        had_staged_changes=true
        git commit --quiet --message 'git-cotree temporary commit' || exit 1
    esac
    git config --local core.bare true || exit 1
    directory=`mktemp -d git-cotree-XXXXXX` || exit 1
    git worktree add --no-checkout --quiet "$directory" "$branch" || exit 1
    for name in * .*
    do
        case $name in "$directory" | .. | . | .git) :;; *)
            mv ./"$name" "$directory"/ || exit 1
        esac
    done
    cd "$directory" || exit 1
    git reset --quiet HEAD || exit 1
    case $had_staged_changes in true)
        git reset --soft --quiet HEAD~1 || exit 1
    esac
    cd "$root" || exit 1
    case $branch in ?*/*)
        mkdir -p "${branch%/*}" || exit 1
    esac
    git worktree move "$directory" "$branch" || exit 1
}

create()
{
    case $# in 0) error_need_co_tree; exit 1; esac
    root=`git rev-parse --git-common-dir`/.. || exit 1
    root=`cd "$root" && pwd` || exit 1
    directory=`_resolve_directory "$root" "$1"` || exit 1
    case $# in 1)
        exec 3>&1
        unused=`git worktree add "$root/$directory" "$directory" 2>&1 1>&3` \
        || git worktree add "$root/$directory" -b "$directory" \
        || exit 1
        exit 0
    esac
    git worktree add "$root/$directory" -b "$directory" "$2" || exit 1
}

delete()
{
    case $# in 0) error_need_co_tree; exit 1; esac
    root=`git rev-parse --git-common-dir`/.. || exit 1
    root=`cd "$root" && pwd` || exit 1
    directory=`_resolve_directory "$root" "$1"` || exit 1
    base=`git -C "$root" branch --show-current` || exit 1
    branch=`git -C "$root/$directory" branch --show-current 2>/dev/null`
    git worktree remove $force "$root/$directory" || exit 1
    case $branch in "$base") :;; ?*)
        git branch --delete $force "$branch" || exit 1
    esac
    while :
    do
        case $directory in */*)
            directory=${directory%/*} || exit 1
            current=`pwd` || exit 1
            case "$root/$directory" in "$current"/?*)
                if error=`rmdir "$root/$directory" 2>&1`
                then
                    continue
                else
                    if _directory_is_empty "$root/$directory"
                    then
                        printf '%s\n' "$error" 1>&2; exit 1
                    fi
                    exit 0
                fi
            esac
        esac
        break
    done
}

_directory_is_empty()
(
    cd "$directory" || exit 1
    for file in *
    do
        case $file in '*') :;; *) exit 1; esac
    done
    for file in ?
    do
        case $file in '?') :;; *) exit 1; esac
    done
    for file in .*
    do
        case $file in . | ..) :;; *) exit 1; esac
    done
    exit 0
)

base()
{
    case $# in 0) error_need_co_tree; exit 1; esac
    root=`git rev-parse --git-common-dir`/.. || exit 1
    root=`cd "$root" && pwd` || exit 1
    directory=`_resolve_directory "$root" "$1"` || exit 1
    cd "$root" || exit 1
    ref=refs/heads/$directory
    if git show-ref --verify --quiet "$ref"
    then
        git symbolic-ref HEAD "$ref" || exit 1
        exit 0
    fi
    error_not_a_branch "$directory"; exit 1
}

_resolve_directory()
{
    directory=${2%/} || exit 1
    while :
    do
        case $directory in ../*)
            current=`pwd` || exit 1
            case $current in "$1"/?*)
                cd .. || exit 1
                directory=${directory#../}
                continue
            esac
        esac
        break
    done
    worktree=`git -C "$previous" rev-parse --is-inside-work-tree` || exit 1
    case $worktree in false)
        current=`pwd` || exit 1
        case $current in "$1"/?*)
            directory=${current#"$1"/}/$directory
        esac
    esac
    printf '%s\n' "$directory"
}

error_not_on_branch()
{
    printf '%s\n' 'must be on a branch' 1>&2
}

error_missing_git_directory()
{
    printf '%s\n' 'missing .git directory' 1>&2
}

error_not_a_branch()
{
    printf '%s\n' "not a branch: $1" 1>&2
}

error_need_co_tree()
{
    printf '%s\n' 'need co-tree argument' 1>&2
}

bad_option()
{
    printf '%s\n' "bad option: $1" 1>&2
}

help()
{
    printf '%s' \
'Usage:
    git-cotree <co-tree> [<commit-ish>]
    git-cotree --delete [--force] <co-tree>
    git-cotree --initialize
    git-cotree --base <co-tree>

Options:
    -h --help --usage       show this help text
    -i --init --initialize  set up for using co-trees
    -d --delete             delete this co-tree
    -f --force              force deleting this co-tree
    -D                      short for both --delete and --force
    -b --base               use this co-tree as the base branch
' || exit 1
}

force=
action=create
for argument
do
    case $argument in
    -h | --help | --usage) help; exit $?;;
    -i | --init | --initialize) action=initialize;;
    -b | --base) action=base;;
    -d | --delete) action=delete;;
    -f | --force) force=--force;;
    -fd | -df | -D) force=--force && action=delete;;
    -*) bad_option "$1"; exit 1;;
    *) break;;
    esac
    shift 1
done
"$action" "$@"
